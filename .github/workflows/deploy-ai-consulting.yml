name: Deploy AI Consulting Landing Page

on:
  push:
    branches: [main]
    paths:
      - 'ai-construction-consulting.html'
      - 'ai-consultancy.css'
      - 'ai-consultancy.js'
      - 'worker.js'
      - 'wrangler.toml'
      - '.github/workflows/deploy-ai-consulting.yml'
  pull_request:
    branches: [main]
    paths:
      - 'ai-construction-consulting.html'
      - 'ai-consultancy.css'
      - 'ai-consultancy.js'
      - 'worker.js'
      - 'wrangler.toml'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test AI Consulting Functionality
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint JavaScript
        run: |
          npx eslint ai-consultancy.js --no-eslintrc --config '{
            "env": { "browser": true, "es2022": true },
            "extends": ["eslint:recommended"],
            "parserOptions": { "ecmaVersion": "latest", "sourceType": "module" },
            "rules": {
              "no-unused-vars": "warn",
              "no-console": "off"
            }
          }' || echo "Linting completed with warnings"
        
      - name: Validate HTML
        run: |
          npx html-validate ai-construction-consulting.html || echo "HTML validation completed"
        
      - name: Check CSS
        run: |
          npx stylelint ai-consultancy.css --config '{
            "rules": {
              "block-no-empty": true,
              "color-no-invalid-hex": true,
              "declaration-colon-space-after": "always"
            }
          }' || echo "CSS validation completed"

  deploy-staging:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy Worker to Staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          environment: staging
          preCommands: |
            echo "Deploying AI Consulting functionality to staging..."
          postCommands: |
            echo "Staging deployment complete"

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Assets
        run: |
          # Create optimised build directory
          mkdir -p dist
          
          # Copy HTML file
          cp ai-construction-consulting.html dist/
          
          # Minify CSS
          npx cleancss -o dist/ai-consultancy.min.css ai-consultancy.css
          
          # Minify JavaScript
          npx terser ai-consultancy.js -o dist/ai-consultancy.min.js --compress --mangle
          
          # Update HTML to use minified assets
          sed -i 's/ai-consultancy\.css/ai-consultancy.min.css/g' dist/ai-construction-consulting.html
          sed -i 's/ai-consultancy\.js/ai-consultancy.min.js/g' dist/ai-construction-consulting.html
        
      - name: Deploy Worker to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          environment: production
          preCommands: |
            echo "Deploying AI Consulting functionality to production..."
            echo "Worker endpoints will be available at:"
            echo "- /api/leads/capture"
            echo "- /api/assessment/submit"
            echo "- /api/analytics/track"
            echo "- /ai-construction-consulting"
          postCommands: |
            echo "Production deployment complete!"
            echo "AI Consulting landing page is now live!"
        
      - name: Deploy Static Assets to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ianyeo-com
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Invalidate Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        
      - name: Test Deployment
        run: |
          # Wait for deployment to propagate
          sleep 30
          
          # Test AI consulting page
          curl -f -s "https://ianyeo.com/ai-construction-consulting" > /dev/null && echo "‚úÖ AI Consulting page is accessible" || echo "‚ùå AI Consulting page failed"
          
          # Test API endpoints
          curl -f -s -X OPTIONS "https://ianyeo.com/api/leads/capture" > /dev/null && echo "‚úÖ Lead capture API is accessible" || echo "‚ùå Lead capture API failed"
          curl -f -s -X OPTIONS "https://ianyeo.com/api/assessment/submit" > /dev/null && echo "‚úÖ Assessment API is accessible" || echo "‚ùå Assessment API failed"
        
      - name: Notify Success
        if: success()
        run: |
          echo "üöÄ AI Consulting Landing Page Deployment Complete!"
          echo ""
          echo "‚úÖ Landing page: https://ianyeo.com/ai-construction-consulting"
          echo "‚úÖ Lead capture API: /api/leads/capture"
          echo "‚úÖ Assessment API: /api/assessment/submit"
          echo "‚úÖ Analytics API: /api/analytics/track"
          echo "‚úÖ A/B Testing: /api/ab-test/{testName}"
          echo ""
          echo "Next steps:"
          echo "1. Test the landing page functionality"
          echo "2. Monitor analytics and conversion rates"
          echo "3. Set up marketing campaigns"
        
      - name: Notify Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for specific error details."
          echo "Common issues:"
          echo "- Missing environment variables"
          echo "- Invalid KV namespace IDs"
          echo "- API token permissions"

  performance-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Performance Testing
    needs: deploy-production
    steps:
      - uses: actions/checkout@v3
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://ianyeo.com/ai-construction-consulting
          uploadArtifacts: true
          temporaryPublicStorage: true
        
      - name: Load Testing
        run: |
          # Simple load test using curl
          echo "Running basic load test..."
          for i in {1..10}; do
            curl -s -w "Response time: %{time_total}s\n" -o /dev/null "https://ianyeo.com/ai-construction-consulting"
          done 